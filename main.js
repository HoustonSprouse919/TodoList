/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("//still need css makeover\nlet projects = [];\nlet currentTaskEdit;\nlet currentProject = 0;\nlet task = [];\n\nfunction newTaskArray() {\n  //creates new array for task to go into for new projects \n  const taskArray = [];\n  let j = projects.length - 1;\n  task[j] = taskArray;\n}\nfunction projectItem(title, description) {\n  //constructor for new project group\n  this.title = title;\n  this.description = description;\n  projects.push(this);\n  newTaskArray();\n}\n\nfunction taskItem(title, description, dueDate, priority, notes) {\n  //constructor for new task\n  this.title = title;\n  this.description = description;\n  this.dueDate = dueDate;\n  this.priority = priority;\n  this.notes = notes;\n  this.checkStatus = false;\n  task[currentProject].push(this);\n}\n\n//checks to see if user has saved projects and task\nif (!localStorage.getItem(\"projectsCopy\")) {\n  new projectItem(\"First title\", \"First description\");\n  new projectItem(\"Second title\", \"Second description\");\n  populateStorageProjects();\n} else {\n  setStorageProjects();\n}\n\nif (!localStorage.getItem(\"taskCopy\")) {\n  new taskItem(\"first Task\", \"yep that's first\", \"yep\", \"first\", \"first\");\n  new taskItem(\"Second task\", \"second\", \"second\", \"second\", \"second\");\n  populateStorageTask();\n} else {\n  setStorageTask();\n}\n//populates and stores data locally for each user\nfunction populateStorageProjects() {\n  localStorage.setItem(\"projectsCopy\", JSON.stringify(projects));\n  setStorageProjects();\n}\nfunction setStorageProjects() {\n  projects = JSON.parse(localStorage.getItem(\"projectsCopy\"));\n  console.log(projects);\n}\n\nfunction populateStorageTask() {\n  localStorage.setItem(\"taskCopy\", JSON.stringify(task));\n  setStorageTask();\n}\nfunction setStorageTask() {\n  task = JSON.parse(localStorage.getItem(\"taskCopy\"));\n  console.log(task);\n}\n\nfunction displayProjects() {\n  //used to display projects array in dom\n  const container = document.querySelector(\"#projectsArea\"); \n  container.replaceChildren();\n\n  function createTopBar() {\n    const element = document.createElement(\"div\");\n    element.setAttribute(\"id\", \"projectTopBar\");\n    return element;\n  }\n  container.appendChild(createTopBar());\n\n  function addNewButton() {\n    let navButton = document.createElement(\"button\");\n    navButton.setAttribute(\"id\", \"addNewButton\");\n    navButton.append(\"Add new project\");\n    navButton.addEventListener(\"click\", () => {\n      closeAllForms();\n      openForm(\"addNewProjectForm\");\n    });\n    return navButton;\n  }\n  document.querySelector(\"#projectTopBar\").appendChild(addNewButton());\n\n  for (let i = 0; i < projects.length; i++) {\n    let divId = \"proDivId\" + i;\n    function createDiv() {\n      const element = document.createElement(\"div\");\n      element.setAttribute(\"id\", divId);\n      element.setAttribute(\"class\", \"projectDiv\");\n      element.addEventListener(\"click\", () => {\n        currentProject = i;\n        displayTask();\n      });\n\n      return element;\n    }\n    container.appendChild(createDiv());\n\n    function createTitle() {\n      let element = document.createElement(\"h2\");\n      element.append(projects[i].title);\n      return element;\n    }\n    document.querySelector(\"#\" + divId).appendChild(createTitle());\n\n    function createDescription() {\n      let element = document.createElement(\"p\");\n      element.append(projects[i].description);\n      return element;\n    }\n    document.querySelector(\"#\" + divId).appendChild(createDescription());\n\n    function button() {\n      let navButton = document.createElement(\"button\");\n      navButton.setAttribute(\"class\", \"edit\");\n      navButton.setAttribute(\"id\", i);\n      navButton.append(\"edit\");\n      navButton.addEventListener(\"click\", () => {\n        closeAllForms();\n        openForm(\"editProjectForm\");\n        currentProject = i;\n      });\n      return navButton;\n    }\n    document.querySelector(\"#\" + divId).appendChild(button());\n    function deleteButton() {\n      let navButton = document.createElement(\"button\");\n      navButton.setAttribute(\"id\", \"deleteButton\");\n      navButton.append(\"Delete this project\");\n      navButton.addEventListener(\"click\", () => {\n        closeAllForms();\n        deleteProject();\n      });\n      return navButton;\n    }\n    document.querySelector(\"#\" + divId).appendChild(deleteButton());\n  }\n}\ndisplayProjects();\n\n\nfunction displayTask() {\n  //used to display current group of task in dom\n  const container = document.querySelector(\"#content\"); //selects container we are using\n  container.replaceChildren();\n\n  function createDiv() {\n    const element = document.createElement(\"div\");\n    element.setAttribute(\"id\", \"topBar\");\n    return element;\n  }\n  container.appendChild(createDiv());\n  function button() {\n    let navButton = document.createElement(\"button\");\n    navButton.setAttribute(\"class\", \"Task\");\n    navButton.setAttribute(\"id\", \"addNewTask\");\n    navButton.append(\"Add new task\");\n    navButton.addEventListener(\"click\", () => {\n      closeAllForms();\n      openForm(\"addNewTaskForm\");\n    });\n    return navButton;\n  }\n  document.querySelector(\"#topBar\").appendChild(button());\n\n  for (let i = 0; i < task[currentProject].length; i++) {\n    let divId = \"taskDivId\" + i;\n    function createDiv() {\n      const element = document.createElement(\"div\");\n      element.setAttribute(\"id\", divId);\n      element.setAttribute(\"class\", \"taskDiv\");\n      return element;\n    }\n    container.appendChild(createDiv());\n\n    function createTitle() {\n      let element = document.createElement(\"h2\");\n      element.setAttribute(\"class\", \"title\");\n      element.append(\"Task: \" + task[currentProject][i].title);\n      return element;\n    }\n    document.querySelector(\"#\" + divId).appendChild(createTitle());\n\n    function createDescription() {\n      let element = document.createElement(\"p\");\n      element.setAttribute(\"class\", \"description\");\n      element.append(\"Description: \" + task[currentProject][i].description);\n      return element;\n    }\n    document.querySelector(\"#\" + divId).appendChild(createDescription());\n\n    function createDueDate() {\n      let element = document.createElement(\"p\");\n      element.setAttribute(\"class\", \"dueDate\");\n      element.append(\"Due date: \" + task[currentProject][i].dueDate);\n      return element;\n    }\n    document.querySelector(\"#\" + divId).appendChild(createDueDate());\n\n    function createPriority() {\n      let element = document.createElement(\"p\");\n      element.setAttribute(\"class\", \"priority\");\n      element.append(\"Priority: \" + task[currentProject][i].priority);\n      return element;\n    }\n    document.querySelector(\"#\" + divId).appendChild(createPriority());\n\n    function createNotes() {\n      let element = document.createElement(\"p\");\n      element.setAttribute(\"class\", \"notes\");\n      element.append(\"Notes: \" + task[currentProject][i].notes);\n      return element;\n    }\n    document.querySelector(\"#\" + divId).appendChild(createNotes());\n    function createButtonDiv() {\n      const element = document.createElement(\"div\");\n      element.setAttribute(\"id\", (divId+ \"buttonGroup\"));\n      return element;\n    }\n    document.querySelector(\"#\" + divId).appendChild(createButtonDiv());\n    function button() {\n      let navButton = document.createElement(\"button\");\n      navButton.setAttribute(\"class\", \"Task\");\n      navButton.setAttribute(\"id\", i);\n      navButton.append(\"edit\");\n      navButton.addEventListener(\"click\", () => {\n        closeAllForms();\n        openForm(\"editTaskForm\");\n        currentTaskEdit = i;\n      });\n      return navButton;\n    }\n    document.querySelector(\"#\" +divId+ \"buttonGroup\").appendChild(button());\n    function deleteButton() {\n      let navButton = document.createElement(\"button\");\n      navButton.setAttribute(\"id\", \"deleteTaskButton\");\n      navButton.append(\"Delete\");\n      navButton.addEventListener(\"click\", () => {\n        closeAllForms();\n        currentTaskEdit = i;\n        deleteTask();\n      });\n      return navButton;\n    }\n    document.querySelector(\"#\" +divId+ \"buttonGroup\").appendChild(deleteButton());\n  }\n}\ndisplayTask();\n\nfunction openForm(id) {\n  //opens specified form for user\n  document.getElementById(id).style.display = \"block\";\n}\n\nfunction closeForm(id) {\n  //closes specified form\n  document.getElementById(id).style.display = \"none\";\n}\nfunction closeAllForms() {\n  document.getElementById(\"editProjectForm\").style.display = \"none\";\n  document.getElementById(\"addNewProjectForm\").style.display = \"none\";\n  document.getElementById(\"addNewTaskForm\").style.display = \"none\";\n  document.getElementById(\"editTaskForm\").style.display = \"none\";\n}\n\nfunction editProject(newTitle, newDescription) {\n  //changes attributes of current project\n  projects[currentProject].title = newTitle;\n  projects[currentProject].description = newDescription;\n  populateStorageProjects();\n  displayProjects();\n}\nfunction addNewProject(projectName, projectDesc) {\n  new projectItem(projectName, projectDesc);\n  populateStorageProjects();\n  displayProjects();\n}\n\nfunction editTask(\n  newTitle,\n  newDescription,\n  newDueDate,\n  newPriority,\n  newNotes,\n  newCheckStatus\n) {\n  task[currentProject][currentTaskEdit].title = newTitle;\n  task[currentProject][currentTaskEdit].description = newDescription;\n  task[currentProject][currentTaskEdit].dueDate = newDueDate;\n  task[currentProject][currentTaskEdit].priority = newPriority;\n  task[currentProject][currentTaskEdit].notes = newNotes;\n  task[currentProject][currentTaskEdit].checkStatus = newCheckStatus;\n  populateStorageTask();\n  displayTask();\n}\nfunction addNewTask(title, description, dueDate, priority, notes) {\n  new taskItem(title, description, dueDate, priority, notes, task);\n  populateStorageTask();\n  displayTask();\n}\nfunction deleteProject(){\n  console.log(\"working\")\n  projects.splice(currentProject,1);\n  task.splice(currentProject,1)\n  currentProject = 0;\n  populateStorageProjects();\n  populateStorageTask();\n  displayProjects();\n  displayTask();\n}\n\nfunction deleteTask(){\n  task[currentProject].splice(currentTaskEdit,1)\n  populateStorageTask();\n  displayTask();\n}\n//all of these are just adding event listeners to buttons in the forms\ndocument.querySelector(\"#submitChanges\").addEventListener(\"click\", () => {\n  editProject(\n    document.getElementById(\"projectName\").value,\n    document.getElementById(\"projectDesc\").value\n  );\n  closeForm(\"editProjectForm\");\n  document.getElementById(\"actualEditProjectForm\").reset();\n});\ndocument.querySelector(\"#btnCancel\").addEventListener(\"click\", () => {\n  closeForm(\"editProjectForm\");\n});\n\ndocument.querySelector(\"#submitNewProject\").addEventListener(\"click\", () => {\n  addNewProject(\n    document.getElementById(\"newProjectName\").value,\n    document.getElementById(\"newProjectDesc\").value\n  );\n  closeForm(\"addNewProjectForm\");\n  document.getElementById(\"actualNewProjectForm\").reset();\n});\ndocument.querySelector(\"#cancelNewProject\").addEventListener(\"click\", () => {\n  closeForm(\"addNewProjectForm\");\n});\n\ndocument.querySelector(\"#editTaskButton\").addEventListener(\"click\", () => {\n  editTask(\n    document.getElementById(\"editTaskName\").value,\n    document.getElementById(\"editTaskDesc\").value,\n    document.getElementById(\"editTaskNotes\").value,\n    document.getElementById(\"editTaskPriority\").value,\n    document.getElementById(\"editTaskDueDate\").value\n  );\n  closeForm(\"editTaskForm\");\n  document.getElementById(\"actualEditTaskForm\").reset();\n});\ndocument.querySelector(\"#cancelEditTask\").addEventListener(\"click\", () => {\n  closeForm(\"editTaskForm\");\n});\n\ndocument.querySelector(\"#submitNewTaskButton\").addEventListener(\"click\", () => {\n  addNewTask(\n    document.getElementById(\"newTaskName\").value,\n    document.getElementById(\"newTaskDesc\").value,\n    document.getElementById(\"newTaskDueDate\").value,\n    document.getElementById(\"newTaskPriority\").value,\n    document.getElementById(\"newTaskNotes\").value\n  );\n  closeForm(\"addNewTaskForm\");\n  document.getElementById(\"actualAddNewTaskForm\").reset();\n});\ndocument.querySelector(\"#cancelNewTaskButton\").addEventListener(\"click\", () => {\n  closeForm(\"addNewTaskForm\");\n});\n\n\n//# sourceURL=webpack://todolist/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;